[["Map",1,2,7,8],"meta::meta",["Map",3,4,5,6],"astro-version","5.0.3","config-digest","0a272e9e80705952","blog",["Map",9,10,41,42,72,73,102,103,127,128,211,212,232,233],"grocery-driven-development",{"id":9,"data":11,"body":16,"filePath":17,"digest":18,"rendered":19,"legacyId":40},{"title":12,"description":13,"date":14,"revisions":15},"Grocery Driven Development","What looking away from Agile and how we currently think about building software might look like.","2024-03-24",1,"Around the year 2000, the experience of walking into a Whole Foods Market was markedly different from entering your local grocery store. Whole Foods eventually sold for $13 billion. If this had been a tech company growing, finding product-market fit, scaling, and selling, the tech world would be ablaze, discussing how their management style spurred this tremendous success. However, the insights from operating a wildly successful grocery store haven't permeated the tech industry. Despite the success coming from a hyper-competitive, low-margin sector, tech continues to prioritize a MBA-first approach, leveraging data, agile methodologies, cross-functional teams, and constant reporting, rather than empowering local teams to do the work. The tech industry moves fast—Web 2.0, Rails, and later React each took the industry by storm. Yet, we predominantly cling to Agile as the framework for running our companies and developing features.\n\n## Tech isn't organic\n\n\"Technology isn't groceries,\" your data analyst may object. \"We need Agile because of the twelve principles...\" your scrum master or Agile coach might say. Meanwhile, as they collect their six-figure salaries, a 22-year-old is figuring out how to merchandise yogurt to eke out an extra 1% in sales right now for $18 an hour. Maybe they went to college, possibly for Art History, and they might have even finished. Yet, they still possess an intuitive understanding of how to grow a key metric like sales, especially when success could mean receiving a bonus.\n\nThe great myth of the tech industry is its perceived uniqueness. It indeed was unique when the Agile Manifesto was penned in 2001. At that time, software delivery was often a one-off event, unlike today's continuous updates facilitated by the web. This historical backdrop is essential for understanding the evolution. Nowadays, it's likely that software users have interacted with various applications previously. They might have used a different CRM or ERP system but are acquainted with the basics. Software has seamlessly integrated into our lives to such an extent that it often goes unnoticed. This has shifted the benchmark for software from merely functioning to being of good quality.\n\n\"Good\" encompasses a spectrum. Walmart is good; Whole Foods is good; even the grocer around the corner is good. Each understands its identity, similar to entities within web technology. In this comparison, Automattic could be seen as Walmart, quietly amassing significant profits and powering around 40% of the web. Netflix, akin to Whole Foods pre-acquisition, faces challenges in a competitive industry despite once having a considerable lead. Nonetheless, these companies have become staples, with customers choosing what best suits them. Your workplace is striving to emulate one of these models - Whole Foods, Walmart, or the local grocery store, each presenting a unique value proposition. It might be aiming for a sleek and modern vibe or perhaps something straightforward and universally accessible.\n\nThis suggests that, akin to our preferred grocery stores, it's possible to bypass the facade of maintaining numerous idiosyncratic layers and squandering time on \"data-driven insights.\"\n\n## We're not just putting things on a shelf\n\nYes you are. The era of generic SaaS has arrived. Almost everyone has interacted with a software product by now. Your customers are technologically savvy; they grasp the concepts of drag and drop and workflows. They are familiar with terms like CSV and integration. Sure, they may not be able to create these elements, and at times, they might still find themselves perplexed. However, they understand the basics of software.\n\nWhen I developed my first, admittedly subpar, SaaS product for the comic book industry, every customer I spoke with instantly comprehended how the app functioned. Their requests were direct and unambiguous. There was no need for me to educate them. Some features I implemented were superfluous. For instance, they opted to share a single password for the app. Perhaps improving the onboarding process to facilitate user creation would have been wise, but it was not a concern for them, and my focus was on developing features they valued. Comic book shop owners might not be technical experts, but living in 2024, they are far more adept than many tech professionals assume.\n\nI simply placed the application on the shelf. They utilized it, trained their employees, and immediately derived value from it, then swiftly shifted their focus to other aspects of their business. This sets the standard for software today. It's akin to shopping for tomato sauce at the grocery store, where you expect to find both a budget-friendly generic option and a premium organic choice that tells the farmer's story on its label.\n\n## The software you're building is probably Prego\n\nIf I were to short a tomato sauce brand, it would be Prego. It doesn't matter to consumers whether it's Prego or a competitor; what they care about is the $0.99 instant coupon. If the coupon doesn't interest them, they're either inclined to make their own sauce or purchase a high-end product, like Rao's Homemade. The software industry now finds itself in a similar situation to the grocery store sector, which has seen undifferentiated brands for the past 75 years, where ease of access generally represents the product's most significant value.\n\nDon't believe me? Consider Slack versus Teams. Until recently, Slack was objectively superior; now, it's merely better. However, a company in need of chat software will settle for Teams because it's adequate. It's the Prego of chat software, as is Slack. A decade ago, Slack was a distinct differentiator; today, what's needed is merely effective chat software. Companies are now exploring Discord or Campfire because, frankly, only two or three features on Slack truly matter. The rest is superfluous.\n\nConsider the vast number of people working on Slack—it's excessive. I'd argue that a team of 10 could build a superior version of the same product. They're engaged in A/B testing, click tracking, creating feature flags, and conducting extensive \"user research.\" They earn $200,000 a year to interview customers, coordinate developers, generate documentation, and write Jira tickets. And what's the end result? They botched the redesign, and it's atrocious. However, the redesign's failure isn't the critical issue.\n\nThe poorly received new Slack redesign won't change the landscape. Those contemplating leaving Slack for Discord will likely proceed. No one will switch to Teams because of it. Why? Because the category remains undifferentiated.\n\n## I need parmesean cheese\n\nThere are three optimal choices:\n\n1. Go to Walmart or Target and pick up some cheese in a green bottle, maybe grab a bag too if you're feeling fancy.\n2. Visit a nicer grocery store and buy a block of cheese or perhaps something grated.\n3. Opt for the Cheese Monger at a specialty cheese shop, though a Whole Foods type of grocery will suffice.\n\nThe highest-end experience, the cheese monger, has never engaged in A/B testing their products. They don't run numerous data tests or collect metrics beyond the basic question of whether this is working. So, what does \"is this working\" mean in the context of a cheese monger? Ideally, it boils down to one thing: does this product justify its presence on the shelf by paying for itself? Sometimes, certain products are carried due to ancillary needs, such as the store manager's personal preference.\n\n## Overlaying grocery store management onto tech\n\nGrocery stores are broken into departments. Apps a frequently built in a simnilar manner. A web app might have a team dedicated to onboarding and another dedicated to integrations. A grocery store works similarly. There's a Frontend team. They manage checkout, returns and incoming phone calls. And a dairy team. That manages the Dairy Box. There's frequently occasional weird overlaps. An example would be ricotta cheese. This could be managed by the cheese department, the dairy team and sometimes both.","src/content/blog/grocery-driven-development.md","99062756bd777eb0",{"html":20,"metadata":21},"\u003Cp>Around the year 2000, the experience of walking into a Whole Foods Market was markedly different from entering your local grocery store. Whole Foods eventually sold for $13 billion. If this had been a tech company growing, finding product-market fit, scaling, and selling, the tech world would be ablaze, discussing how their management style spurred this tremendous success. However, the insights from operating a wildly successful grocery store haven’t permeated the tech industry. Despite the success coming from a hyper-competitive, low-margin sector, tech continues to prioritize a MBA-first approach, leveraging data, agile methodologies, cross-functional teams, and constant reporting, rather than empowering local teams to do the work. The tech industry moves fast—Web 2.0, Rails, and later React each took the industry by storm. Yet, we predominantly cling to Agile as the framework for running our companies and developing features.\u003C/p>\n\u003Ch2 id=\"tech-isnt-organic\">Tech isn’t organic\u003C/h2>\n\u003Cp>“Technology isn’t groceries,” your data analyst may object. “We need Agile because of the twelve principles…” your scrum master or Agile coach might say. Meanwhile, as they collect their six-figure salaries, a 22-year-old is figuring out how to merchandise yogurt to eke out an extra 1% in sales right now for $18 an hour. Maybe they went to college, possibly for Art History, and they might have even finished. Yet, they still possess an intuitive understanding of how to grow a key metric like sales, especially when success could mean receiving a bonus.\u003C/p>\n\u003Cp>The great myth of the tech industry is its perceived uniqueness. It indeed was unique when the Agile Manifesto was penned in 2001. At that time, software delivery was often a one-off event, unlike today’s continuous updates facilitated by the web. This historical backdrop is essential for understanding the evolution. Nowadays, it’s likely that software users have interacted with various applications previously. They might have used a different CRM or ERP system but are acquainted with the basics. Software has seamlessly integrated into our lives to such an extent that it often goes unnoticed. This has shifted the benchmark for software from merely functioning to being of good quality.\u003C/p>\n\u003Cp>“Good” encompasses a spectrum. Walmart is good; Whole Foods is good; even the grocer around the corner is good. Each understands its identity, similar to entities within web technology. In this comparison, Automattic could be seen as Walmart, quietly amassing significant profits and powering around 40% of the web. Netflix, akin to Whole Foods pre-acquisition, faces challenges in a competitive industry despite once having a considerable lead. Nonetheless, these companies have become staples, with customers choosing what best suits them. Your workplace is striving to emulate one of these models - Whole Foods, Walmart, or the local grocery store, each presenting a unique value proposition. It might be aiming for a sleek and modern vibe or perhaps something straightforward and universally accessible.\u003C/p>\n\u003Cp>This suggests that, akin to our preferred grocery stores, it’s possible to bypass the facade of maintaining numerous idiosyncratic layers and squandering time on “data-driven insights.”\u003C/p>\n\u003Ch2 id=\"were-not-just-putting-things-on-a-shelf\">We’re not just putting things on a shelf\u003C/h2>\n\u003Cp>Yes you are. The era of generic SaaS has arrived. Almost everyone has interacted with a software product by now. Your customers are technologically savvy; they grasp the concepts of drag and drop and workflows. They are familiar with terms like CSV and integration. Sure, they may not be able to create these elements, and at times, they might still find themselves perplexed. However, they understand the basics of software.\u003C/p>\n\u003Cp>When I developed my first, admittedly subpar, SaaS product for the comic book industry, every customer I spoke with instantly comprehended how the app functioned. Their requests were direct and unambiguous. There was no need for me to educate them. Some features I implemented were superfluous. For instance, they opted to share a single password for the app. Perhaps improving the onboarding process to facilitate user creation would have been wise, but it was not a concern for them, and my focus was on developing features they valued. Comic book shop owners might not be technical experts, but living in 2024, they are far more adept than many tech professionals assume.\u003C/p>\n\u003Cp>I simply placed the application on the shelf. They utilized it, trained their employees, and immediately derived value from it, then swiftly shifted their focus to other aspects of their business. This sets the standard for software today. It’s akin to shopping for tomato sauce at the grocery store, where you expect to find both a budget-friendly generic option and a premium organic choice that tells the farmer’s story on its label.\u003C/p>\n\u003Ch2 id=\"the-software-youre-building-is-probably-prego\">The software you’re building is probably Prego\u003C/h2>\n\u003Cp>If I were to short a tomato sauce brand, it would be Prego. It doesn’t matter to consumers whether it’s Prego or a competitor; what they care about is the $0.99 instant coupon. If the coupon doesn’t interest them, they’re either inclined to make their own sauce or purchase a high-end product, like Rao’s Homemade. The software industry now finds itself in a similar situation to the grocery store sector, which has seen undifferentiated brands for the past 75 years, where ease of access generally represents the product’s most significant value.\u003C/p>\n\u003Cp>Don’t believe me? Consider Slack versus Teams. Until recently, Slack was objectively superior; now, it’s merely better. However, a company in need of chat software will settle for Teams because it’s adequate. It’s the Prego of chat software, as is Slack. A decade ago, Slack was a distinct differentiator; today, what’s needed is merely effective chat software. Companies are now exploring Discord or Campfire because, frankly, only two or three features on Slack truly matter. The rest is superfluous.\u003C/p>\n\u003Cp>Consider the vast number of people working on Slack—it’s excessive. I’d argue that a team of 10 could build a superior version of the same product. They’re engaged in A/B testing, click tracking, creating feature flags, and conducting extensive “user research.” They earn $200,000 a year to interview customers, coordinate developers, generate documentation, and write Jira tickets. And what’s the end result? They botched the redesign, and it’s atrocious. However, the redesign’s failure isn’t the critical issue.\u003C/p>\n\u003Cp>The poorly received new Slack redesign won’t change the landscape. Those contemplating leaving Slack for Discord will likely proceed. No one will switch to Teams because of it. Why? Because the category remains undifferentiated.\u003C/p>\n\u003Ch2 id=\"i-need-parmesean-cheese\">I need parmesean cheese\u003C/h2>\n\u003Cp>There are three optimal choices:\u003C/p>\n\u003Col>\n\u003Cli>Go to Walmart or Target and pick up some cheese in a green bottle, maybe grab a bag too if you’re feeling fancy.\u003C/li>\n\u003Cli>Visit a nicer grocery store and buy a block of cheese or perhaps something grated.\u003C/li>\n\u003Cli>Opt for the Cheese Monger at a specialty cheese shop, though a Whole Foods type of grocery will suffice.\u003C/li>\n\u003C/ol>\n\u003Cp>The highest-end experience, the cheese monger, has never engaged in A/B testing their products. They don’t run numerous data tests or collect metrics beyond the basic question of whether this is working. So, what does “is this working” mean in the context of a cheese monger? Ideally, it boils down to one thing: does this product justify its presence on the shelf by paying for itself? Sometimes, certain products are carried due to ancillary needs, such as the store manager’s personal preference.\u003C/p>\n\u003Ch2 id=\"overlaying-grocery-store-management-onto-tech\">Overlaying grocery store management onto tech\u003C/h2>\n\u003Cp>Grocery stores are broken into departments. Apps a frequently built in a simnilar manner. A web app might have a team dedicated to onboarding and another dedicated to integrations. A grocery store works similarly. There’s a Frontend team. They manage checkout, returns and incoming phone calls. And a dairy team. That manages the Dairy Box. There’s frequently occasional weird overlaps. An example would be ricotta cheese. This could be managed by the cheese department, the dairy team and sometimes both.\u003C/p>",{"headings":22,"imagePaths":39,"frontmatter":11},[23,27,30,33,36],{"depth":24,"slug":25,"text":26},2,"tech-isnt-organic","Tech isn’t organic",{"depth":24,"slug":28,"text":29},"were-not-just-putting-things-on-a-shelf","We’re not just putting things on a shelf",{"depth":24,"slug":31,"text":32},"the-software-youre-building-is-probably-prego","The software you’re building is probably Prego",{"depth":24,"slug":34,"text":35},"i-need-parmesean-cheese","I need parmesean cheese",{"depth":24,"slug":37,"text":38},"overlaying-grocery-store-management-onto-tech","Overlaying grocery store management onto tech",[],"grocery-driven-development.md","hiring",{"id":41,"data":43,"body":48,"filePath":49,"digest":50,"rendered":51,"legacyId":71},{"title":44,"description":45,"date":46,"revisions":47},"On hiring","I've been thinking about hiring. I struggle with interviews but typically perform at a high level. What's the disconnect?","2022-09-29",3,"I have a lot of problems with how hiring works for developers. My biggest problem with the process is that companies don't actually want to hire developers. The process reflects this.\n\nAs an observation, there's a lot of thinking that's been done about how to make choices. [The secretary problem](https://en.wikipedia.org/wiki/Secretary_problem) is one that I like. Here's my understanding of how it works. If you're hiring a secretary, and you have 100 candidates, the theoretical \"best way\" to hire, is to do 37 interviews, scoring each prospect but refusing to hire each of these potential prospects. Then, you hire the next prospect that exceeds the best score.\n\nStatistically, this works. There's a bunch of handwaving I don't really understand here, including something about Euler's number however, the lesson seems pretty clear. Generally, with a prospect pool of 100, you can work through a small subset, get a sense of what the near top of the skill level is, then just take the next person that exceeds that score. Rarely, you'll end up hiring prospect 100 and even then, they'll be in the 40-60% range a good bit of the time. The rest of the time, you'll be getting a very high-quality prospect. Maybe even the Statistically best one.\n\n### The problems with this approach are:\n\n- you don't know how to measure developers (I'm skeptical you know how to measure modern secretaries, but it was more straightforward in the era that this idea was considered)\n- you're not willing to pay for the best\n- you don't need the \"best\"\n- you don't actually have 100 candidates\n- your need is immediate, you don't have time to evaluate 100 people\n- you can't afford to evaluate 37+ candidates\n\nUsing the secretary problem to guide our solution here, not gonna do a lot of good. What's next? Next is the Penelope solution (this is what most companies seem to do).\n\nWhen Odysseus is off fighting the trojan war (which takes like 10 years or something) suitors start showing up at Penelope's. They're trying to work their way in. She's a queen so like... people wanna marry her and get that queen's money. She loves Odysseus and knows in her heart that he's not dead. Meanwhile, these suitors pile up. Like 108 of them or something. Ancient Greeks were a wild bunch. Anyway, they're all living in his house, trying to marry his wife. She comes up with various excuses not to marry one of them. She makes this shroud (which I think is like a big blanket) and then unweaves it every night to delay marriage. Also, she may enjoy all this attention from these suitors, that's a possibility. Finally, after she can't put it off anymore she comes up with this wild test. Whichever suitor can use Odysseus' bow and shoot a crazy shot through a dozen axes. Turns out Odysseus is there, dressed as a beggar, and he's the only one who can even string the bow (he's the mythical 10x developer). He murders all the potential suitors and Odysseus and Penelope live happily ever after.\n\nFrom my perspective, this is the hiring plan for most companies. In this analogy, Penelope's strategies are like the shroud. If you pass all the goofy requirements in the job posting, five years of experience in a framework that's existed for three years, you're then presented with an absurd test. I'm currently practicing my skills with Linked Lists. I pretty much only do javascript, React, and CRUD at that, where you seldom need linked lists. The same goes for most data structures. Asking these questions is effectively asking \"shoot an arrow from this impossible-to-string bow through these axes\".\n\nAs a quick note, there's tremendous filtering value here. Demanding your candidates know Linked Lists and other Algorithms does have value. You're self-sorting to the candidates who either know this information or are willing to learn this information. That's valuable.\n\nRight now you might be thinking the Penelope strategy is a good one! Here are the problems with this strategy from a business perspective.\n\n### The problems with this approach are:\n\n- you don't have 10 years, the best candidates don't need you, you need them.\n- you're not willing to pay for the best\n- you don't need the \"best\"\n- your need is immediate, you don't have time\n- you don't actually shoot arrows through axes and you don't use linked lists\n- in the above story the 10x developer literally kills all the other suitors\n\nProbably, you're just making a button blue on the internet or maybe building a dashboard. Perhaps, you're building an event bus and a dead letter queue. Either way, mostly what you're doing is building stuff that already exists. You probably need more people who will be conscientious, careful, hardworking, and focused. I'd wager you need friendly, thoughtful, and hardworking way more than Linked Lists, Stacks, and Depth First Search.\n\nOkay, so I've made a case that what matters is soft skills, far more than hard development skills. What evidence do I have to prove my case?\n\nAgile. Agile is the evidence. We can set aside my thoughts about Agile for now and instead look at what problem it is trying to solve. In the Agile Manifesto we:\n\n- value individuals and interactions over processes and tools\n- working software over comprehensive docs\n- customer collaboration over contract negotiation\n- Responding to change over following a plan\n\nThe third item doesn't really apply to software developers day to day. That is to say, it's not something you'd want to optimize your hiring process around selecting. Individuals over processes? That sounds like soft skills. Working software over docs? Sounds like someone who finishes things, not someone who is super skilled at Algorithms. Responding to change over plans? Again, this is an attitude much more than a skill set. Companies routinely set huge sums of money on fire trying to be agile. But their hiring process is designed to select people who are, by the selection process, not Agile.\n\n### What's the alternative?\n\nI'd say it's Tyler Cowen. Tyler Cowen is smarter than you. He's smarter than me. He's got a venture capital fund. His decision process is based on a conversation. For his venture fund, he bets that having a conversation with a person is a great indicator to find out if they're a good bet. I agree, only in part because Tyler is heaps smarter than me. I'm suggesting that a simple conversation and some reference checks would be far superior to almost every hiring process for developers.\n\nComparison of conversation vs traditional multi-stage code-laden interviews.\nTime:\nConversation is much faster\nEffort:\nTough... conversation means you need people who are hiring to be capable of having conversations. It's probably closer than I'd like to think because probably, you don't have that person on staff. But, if you don't have that person on staff, you already suck at hiring.\nOutcome:\nEven google says they don't know how to identify and measure candidates so I'll call this a push\n\nRisks with the conversational approach\nYou're probably likely to hire people who are good at verbal communication\nYou're unlikely to hire those who aren't\n\n#### Additional burden\n\nConversational interviewing, should, by its very nature, yield some false positives. Some people are very good salespeople. You'll need to check references. Companies don't really do that. As a result, this will be new work. Also, you'll need to let people go when you hire the wrong candidate. Companies are also very bad at this. Mostly, people hate confrontation. You'll need to, instead of spending huge effort on every candidate interview, spend actual effort ensuring that you have good onboarding. Once you identify someone who can't do the work, you'll need to let them go. That means you'll actually need to do it. Mostly, companies are bad at this too.\n\n#### Additional benefit\n\nBecause of the drawbacks of conversational interviewing, your company will get good at the following:\n\n- onboarding\n- having difficult conversations\n- letting go of poor performers\n- checking references\n\nYour company should be good at that anyway. Based on my experiences onboarding and working at a few companies, this is not true currently.","src/content/blog/hiring.md","e315253e5b4dc165",{"html":52,"metadata":53},"\u003Cp>I have a lot of problems with how hiring works for developers. My biggest problem with the process is that companies don’t actually want to hire developers. The process reflects this.\u003C/p>\n\u003Cp>As an observation, there’s a lot of thinking that’s been done about how to make choices. \u003Ca href=\"https://en.wikipedia.org/wiki/Secretary_problem\">The secretary problem\u003C/a> is one that I like. Here’s my understanding of how it works. If you’re hiring a secretary, and you have 100 candidates, the theoretical “best way” to hire, is to do 37 interviews, scoring each prospect but refusing to hire each of these potential prospects. Then, you hire the next prospect that exceeds the best score.\u003C/p>\n\u003Cp>Statistically, this works. There’s a bunch of handwaving I don’t really understand here, including something about Euler’s number however, the lesson seems pretty clear. Generally, with a prospect pool of 100, you can work through a small subset, get a sense of what the near top of the skill level is, then just take the next person that exceeds that score. Rarely, you’ll end up hiring prospect 100 and even then, they’ll be in the 40-60% range a good bit of the time. The rest of the time, you’ll be getting a very high-quality prospect. Maybe even the Statistically best one.\u003C/p>\n\u003Ch3 id=\"the-problems-with-this-approach-are\">The problems with this approach are:\u003C/h3>\n\u003Cul>\n\u003Cli>you don’t know how to measure developers (I’m skeptical you know how to measure modern secretaries, but it was more straightforward in the era that this idea was considered)\u003C/li>\n\u003Cli>you’re not willing to pay for the best\u003C/li>\n\u003Cli>you don’t need the “best”\u003C/li>\n\u003Cli>you don’t actually have 100 candidates\u003C/li>\n\u003Cli>your need is immediate, you don’t have time to evaluate 100 people\u003C/li>\n\u003Cli>you can’t afford to evaluate 37+ candidates\u003C/li>\n\u003C/ul>\n\u003Cp>Using the secretary problem to guide our solution here, not gonna do a lot of good. What’s next? Next is the Penelope solution (this is what most companies seem to do).\u003C/p>\n\u003Cp>When Odysseus is off fighting the trojan war (which takes like 10 years or something) suitors start showing up at Penelope’s. They’re trying to work their way in. She’s a queen so like… people wanna marry her and get that queen’s money. She loves Odysseus and knows in her heart that he’s not dead. Meanwhile, these suitors pile up. Like 108 of them or something. Ancient Greeks were a wild bunch. Anyway, they’re all living in his house, trying to marry his wife. She comes up with various excuses not to marry one of them. She makes this shroud (which I think is like a big blanket) and then unweaves it every night to delay marriage. Also, she may enjoy all this attention from these suitors, that’s a possibility. Finally, after she can’t put it off anymore she comes up with this wild test. Whichever suitor can use Odysseus’ bow and shoot a crazy shot through a dozen axes. Turns out Odysseus is there, dressed as a beggar, and he’s the only one who can even string the bow (he’s the mythical 10x developer). He murders all the potential suitors and Odysseus and Penelope live happily ever after.\u003C/p>\n\u003Cp>From my perspective, this is the hiring plan for most companies. In this analogy, Penelope’s strategies are like the shroud. If you pass all the goofy requirements in the job posting, five years of experience in a framework that’s existed for three years, you’re then presented with an absurd test. I’m currently practicing my skills with Linked Lists. I pretty much only do javascript, React, and CRUD at that, where you seldom need linked lists. The same goes for most data structures. Asking these questions is effectively asking “shoot an arrow from this impossible-to-string bow through these axes”.\u003C/p>\n\u003Cp>As a quick note, there’s tremendous filtering value here. Demanding your candidates know Linked Lists and other Algorithms does have value. You’re self-sorting to the candidates who either know this information or are willing to learn this information. That’s valuable.\u003C/p>\n\u003Cp>Right now you might be thinking the Penelope strategy is a good one! Here are the problems with this strategy from a business perspective.\u003C/p>\n\u003Ch3 id=\"the-problems-with-this-approach-are-1\">The problems with this approach are:\u003C/h3>\n\u003Cul>\n\u003Cli>you don’t have 10 years, the best candidates don’t need you, you need them.\u003C/li>\n\u003Cli>you’re not willing to pay for the best\u003C/li>\n\u003Cli>you don’t need the “best”\u003C/li>\n\u003Cli>your need is immediate, you don’t have time\u003C/li>\n\u003Cli>you don’t actually shoot arrows through axes and you don’t use linked lists\u003C/li>\n\u003Cli>in the above story the 10x developer literally kills all the other suitors\u003C/li>\n\u003C/ul>\n\u003Cp>Probably, you’re just making a button blue on the internet or maybe building a dashboard. Perhaps, you’re building an event bus and a dead letter queue. Either way, mostly what you’re doing is building stuff that already exists. You probably need more people who will be conscientious, careful, hardworking, and focused. I’d wager you need friendly, thoughtful, and hardworking way more than Linked Lists, Stacks, and Depth First Search.\u003C/p>\n\u003Cp>Okay, so I’ve made a case that what matters is soft skills, far more than hard development skills. What evidence do I have to prove my case?\u003C/p>\n\u003Cp>Agile. Agile is the evidence. We can set aside my thoughts about Agile for now and instead look at what problem it is trying to solve. In the Agile Manifesto we:\u003C/p>\n\u003Cul>\n\u003Cli>value individuals and interactions over processes and tools\u003C/li>\n\u003Cli>working software over comprehensive docs\u003C/li>\n\u003Cli>customer collaboration over contract negotiation\u003C/li>\n\u003Cli>Responding to change over following a plan\u003C/li>\n\u003C/ul>\n\u003Cp>The third item doesn’t really apply to software developers day to day. That is to say, it’s not something you’d want to optimize your hiring process around selecting. Individuals over processes? That sounds like soft skills. Working software over docs? Sounds like someone who finishes things, not someone who is super skilled at Algorithms. Responding to change over plans? Again, this is an attitude much more than a skill set. Companies routinely set huge sums of money on fire trying to be agile. But their hiring process is designed to select people who are, by the selection process, not Agile.\u003C/p>\n\u003Ch3 id=\"whats-the-alternative\">What’s the alternative?\u003C/h3>\n\u003Cp>I’d say it’s Tyler Cowen. Tyler Cowen is smarter than you. He’s smarter than me. He’s got a venture capital fund. His decision process is based on a conversation. For his venture fund, he bets that having a conversation with a person is a great indicator to find out if they’re a good bet. I agree, only in part because Tyler is heaps smarter than me. I’m suggesting that a simple conversation and some reference checks would be far superior to almost every hiring process for developers.\u003C/p>\n\u003Cp>Comparison of conversation vs traditional multi-stage code-laden interviews.\nTime:\nConversation is much faster\nEffort:\nTough… conversation means you need people who are hiring to be capable of having conversations. It’s probably closer than I’d like to think because probably, you don’t have that person on staff. But, if you don’t have that person on staff, you already suck at hiring.\nOutcome:\nEven google says they don’t know how to identify and measure candidates so I’ll call this a push\u003C/p>\n\u003Cp>Risks with the conversational approach\nYou’re probably likely to hire people who are good at verbal communication\nYou’re unlikely to hire those who aren’t\u003C/p>\n\u003Ch4 id=\"additional-burden\">Additional burden\u003C/h4>\n\u003Cp>Conversational interviewing, should, by its very nature, yield some false positives. Some people are very good salespeople. You’ll need to check references. Companies don’t really do that. As a result, this will be new work. Also, you’ll need to let people go when you hire the wrong candidate. Companies are also very bad at this. Mostly, people hate confrontation. You’ll need to, instead of spending huge effort on every candidate interview, spend actual effort ensuring that you have good onboarding. Once you identify someone who can’t do the work, you’ll need to let them go. That means you’ll actually need to do it. Mostly, companies are bad at this too.\u003C/p>\n\u003Ch4 id=\"additional-benefit\">Additional benefit\u003C/h4>\n\u003Cp>Because of the drawbacks of conversational interviewing, your company will get good at the following:\u003C/p>\n\u003Cul>\n\u003Cli>onboarding\u003C/li>\n\u003Cli>having difficult conversations\u003C/li>\n\u003Cli>letting go of poor performers\u003C/li>\n\u003Cli>checking references\u003C/li>\n\u003C/ul>\n\u003Cp>Your company should be good at that anyway. Based on my experiences onboarding and working at a few companies, this is not true currently.\u003C/p>",{"headings":54,"imagePaths":70,"frontmatter":43},[55,58,60,63,67],{"depth":47,"slug":56,"text":57},"the-problems-with-this-approach-are","The problems with this approach are:",{"depth":47,"slug":59,"text":57},"the-problems-with-this-approach-are-1",{"depth":47,"slug":61,"text":62},"whats-the-alternative","What’s the alternative?",{"depth":64,"slug":65,"text":66},4,"additional-burden","Additional burden",{"depth":64,"slug":68,"text":69},"additional-benefit","Additional benefit",[],"hiring.md","make-it-nice",{"id":72,"data":74,"body":78,"filePath":79,"digest":80,"rendered":81,"legacyId":101},{"title":75,"description":76,"date":77,"revisions":15},"What if instead of Agile, we made it nice?","What if we're all just wrong about how to build software?","2023-02-08","I recently watched [Seven Days Out on Netflix](https://www.netflix.com/title/80207124). There's an episode about Eleven Madison Park. I'd never heard of it, I'm not into restaurants. However, I used to work at them. Nothing that was ever that fancy. Mostly, I worked adjacent to restaurants in the food industry. Nonetheless, a lot of what stuck out in how restaurants get work done resonated deeply for me. The reverse seems true for how software gets made.\n\n### Food Expectations\n\nA well run restaurant or retail store is an exceptional example of a team moving in a single direction. The manager sets expectations, the team delivers. Success is measurable, and planned in advance. Experiments are happening constantly. When I was 20 I was running a business that did $40k a week in sales at the counter. I didn't need to worry about accounting or bills beyond validating invoices. I fully owned scheduling of employees, ordering, training and hiring. I could always phone other store managers or the GM for advice. I frequently did!\n\nIf I thought that a new idea would work, I would try it. If it did, I measured it and validated that it actually worked. Then I shared it with other stores. Success was be quickly replicated. There was no concern that I'd silo information, why would anyone do that. There was minimal concern that \"higher ups\" would miss information crucial to them. Most decisions they didn't need to know about, everything else was shared in regular meetings and conversations.\n\n### Deadlines\n\nIn that business, as in all food businesses, there were a lot of deadlines. You had to order in advance, hire the appropriate amount of staff for holiday seasons be prepared for big weekend sales but low sales on a wednesday. Honestly, it wasn't that hard. I mean... I worked 50 hours a week. I still wake up at 4 or 5am because it permanently changed my sleep schedule. But the business was straightforward.\n\nThe biggest deadline each year was Christmas. On Christmas Eve we'd be open from 7-4 and in those hours we'd do 3 weeks worth of sales. Honestly, I haven't seen scale like that since. Everything had to be right and planned. Things went wrong of course, but you could handle it on the fly because there was always a plan in place.\n\n### Changes and deliverables\n\nOne memory I have from those days is when we needed new cases. We wanted them for years. We had to wait. I'm sure there were capital expenditure considerations that delayed it some time. When we finally got them, it was instant. We ordered the cases, spent weeks planning so that once they were ready, we could install them quickly overnight and have no down time for the store. I actually have this memory for multiple companies. Plan a bunch. Once you get the delivery, install overnight. No downtime.\n\nUsually, nothing went wrong. If something did, you close that portion of the store for the day and the plans you have in place kick in. Everyone knew the risks going in, and for customers, it was an inconvenience, since it was rare, it wasn't a big deal.\n\n### The contrast in software\n\nSoftware has this rhythm thats totally the opposite. It seems much ofxwthe community has converged around two week sprints. While I tend to think this is both too long and too short, it's a very strange timeline to pick.\n\n### Software as the land of low expectations\n\nI've been in countless meetings where someone will say, \"I'm not technical\". It's hard to imagine saying something similar to the chef at a restaurant like Eleven Madison Park. Of course, she wouldn't expect you to be able to make the dish, but she'd expect you to know what a reduction is, why it matters, and how it works.","src/content/blog/make-it-nice.md","1aabc388f5366ee2",{"html":82,"metadata":83},"\u003Cp>I recently watched \u003Ca href=\"https://www.netflix.com/title/80207124\">Seven Days Out on Netflix\u003C/a>. There’s an episode about Eleven Madison Park. I’d never heard of it, I’m not into restaurants. However, I used to work at them. Nothing that was ever that fancy. Mostly, I worked adjacent to restaurants in the food industry. Nonetheless, a lot of what stuck out in how restaurants get work done resonated deeply for me. The reverse seems true for how software gets made.\u003C/p>\n\u003Ch3 id=\"food-expectations\">Food Expectations\u003C/h3>\n\u003Cp>A well run restaurant or retail store is an exceptional example of a team moving in a single direction. The manager sets expectations, the team delivers. Success is measurable, and planned in advance. Experiments are happening constantly. When I was 20 I was running a business that did $40k a week in sales at the counter. I didn’t need to worry about accounting or bills beyond validating invoices. I fully owned scheduling of employees, ordering, training and hiring. I could always phone other store managers or the GM for advice. I frequently did!\u003C/p>\n\u003Cp>If I thought that a new idea would work, I would try it. If it did, I measured it and validated that it actually worked. Then I shared it with other stores. Success was be quickly replicated. There was no concern that I’d silo information, why would anyone do that. There was minimal concern that “higher ups” would miss information crucial to them. Most decisions they didn’t need to know about, everything else was shared in regular meetings and conversations.\u003C/p>\n\u003Ch3 id=\"deadlines\">Deadlines\u003C/h3>\n\u003Cp>In that business, as in all food businesses, there were a lot of deadlines. You had to order in advance, hire the appropriate amount of staff for holiday seasons be prepared for big weekend sales but low sales on a wednesday. Honestly, it wasn’t that hard. I mean… I worked 50 hours a week. I still wake up at 4 or 5am because it permanently changed my sleep schedule. But the business was straightforward.\u003C/p>\n\u003Cp>The biggest deadline each year was Christmas. On Christmas Eve we’d be open from 7-4 and in those hours we’d do 3 weeks worth of sales. Honestly, I haven’t seen scale like that since. Everything had to be right and planned. Things went wrong of course, but you could handle it on the fly because there was always a plan in place.\u003C/p>\n\u003Ch3 id=\"changes-and-deliverables\">Changes and deliverables\u003C/h3>\n\u003Cp>One memory I have from those days is when we needed new cases. We wanted them for years. We had to wait. I’m sure there were capital expenditure considerations that delayed it some time. When we finally got them, it was instant. We ordered the cases, spent weeks planning so that once they were ready, we could install them quickly overnight and have no down time for the store. I actually have this memory for multiple companies. Plan a bunch. Once you get the delivery, install overnight. No downtime.\u003C/p>\n\u003Cp>Usually, nothing went wrong. If something did, you close that portion of the store for the day and the plans you have in place kick in. Everyone knew the risks going in, and for customers, it was an inconvenience, since it was rare, it wasn’t a big deal.\u003C/p>\n\u003Ch3 id=\"the-contrast-in-software\">The contrast in software\u003C/h3>\n\u003Cp>Software has this rhythm thats totally the opposite. It seems much ofxwthe community has converged around two week sprints. While I tend to think this is both too long and too short, it’s a very strange timeline to pick.\u003C/p>\n\u003Ch3 id=\"software-as-the-land-of-low-expectations\">Software as the land of low expectations\u003C/h3>\n\u003Cp>I’ve been in countless meetings where someone will say, “I’m not technical”. It’s hard to imagine saying something similar to the chef at a restaurant like Eleven Madison Park. Of course, she wouldn’t expect you to be able to make the dish, but she’d expect you to know what a reduction is, why it matters, and how it works.\u003C/p>",{"headings":84,"imagePaths":100,"frontmatter":74},[85,88,91,94,97],{"depth":47,"slug":86,"text":87},"food-expectations","Food Expectations",{"depth":47,"slug":89,"text":90},"deadlines","Deadlines",{"depth":47,"slug":92,"text":93},"changes-and-deliverables","Changes and deliverables",{"depth":47,"slug":95,"text":96},"the-contrast-in-software","The contrast in software",{"depth":47,"slug":98,"text":99},"software-as-the-land-of-low-expectations","Software as the land of low expectations",[],"make-it-nice.md","ai-wont-take-your-job",{"id":102,"data":104,"body":109,"filePath":110,"digest":111,"rendered":112,"legacyId":126},{"title":105,"description":106,"date":107,"revisions":108},"AI won't take your job","Why I'm not at all concerned about AI taking my programming job.","2023-03-28",0,"Generally, I'm optimistic about the future. I spend almost zero time worrying about AI taking my programming job. Many other folks are apprehensive about it, which seems normal. Perhaps, more pessimistic people see genuine innovation and get nervous about their jobs. Those people are well-represented in the conversation, and it's worth reading and thinking about what they have to say.\n\n## code is not the important part\n\nFirst, writing code is the least interesting and least important part of my job as a developer. What I actually do is understand requirements. The actual coding is an abstraction around understanding requirements. The need for someone who understands what a business person requests is not going away. And the need for a person to have agreement upon before building a solution? That's not going away either.\n\n## backlogs are incredibly long\n\n## software is bad\n\nThe jobs I've walked into every day since I started building software have","src/content/blog/ai-wont-take-your-job.md","cf7597d6f471e5aa",{"html":113,"metadata":114},"\u003Cp>Generally, I’m optimistic about the future. I spend almost zero time worrying about AI taking my programming job. Many other folks are apprehensive about it, which seems normal. Perhaps, more pessimistic people see genuine innovation and get nervous about their jobs. Those people are well-represented in the conversation, and it’s worth reading and thinking about what they have to say.\u003C/p>\n\u003Ch2 id=\"code-is-not-the-important-part\">code is not the important part\u003C/h2>\n\u003Cp>First, writing code is the least interesting and least important part of my job as a developer. What I actually do is understand requirements. The actual coding is an abstraction around understanding requirements. The need for someone who understands what a business person requests is not going away. And the need for a person to have agreement upon before building a solution? That’s not going away either.\u003C/p>\n\u003Ch2 id=\"backlogs-are-incredibly-long\">backlogs are incredibly long\u003C/h2>\n\u003Ch2 id=\"software-is-bad\">software is bad\u003C/h2>\n\u003Cp>The jobs I’ve walked into every day since I started building software have\u003C/p>",{"headings":115,"imagePaths":125,"frontmatter":104},[116,119,122],{"depth":24,"slug":117,"text":118},"code-is-not-the-important-part","code is not the important part",{"depth":24,"slug":120,"text":121},"backlogs-are-incredibly-long","backlogs are incredibly long",{"depth":24,"slug":123,"text":124},"software-is-bad","software is bad",[],"ai-wont-take-your-job.md","interview-questions",{"id":127,"data":129,"body":133,"filePath":134,"digest":135,"rendered":136,"legacyId":210},{"title":130,"description":131,"date":132,"revisions":64},"Interview Questions","I'm pretty godawful at interviewing. One path to improvement is to write my answer to some common interview questions. In theory, this practice will help my answers in real time be a little more structured.","2022-12-29","What follows are a series of interview questions that I crowd-sourced and my answers. I don't expect that these questions would be asked in 100% of interviews. Rather, I expect that thinking through my answers to these questions will allow me to have more useful answers over time. Additionally, if I feel like an answer performed poorly in an interview, I can reassess these answers and look to say something more meaningful. One hope is that I'll be able to use the structure of these answers to help me when I'm asked something that falls out of the bounds of what I've considered in advance.\n\n---\n\n#### List of questions:\n\n- [How did you get here](#who-would-you-credit-for-helping-you-get-to-where-you-are-now)\n- [Mediate a conflict](can-you-tell-us-about-a-time-you-ve-had-to-mediate-a-conflict-in-your-team)\n- [Helping without being asked](tell-us-about-a-recent-time-where-you-helped-somebody-at-work-without-being-asked)\n- [Personal ownership](can-you-talk-to-us-about-a-project-or-piece-of-work-where-you-feel-you-demonstrated-significant-personal-ownership)\n- [Bad decision](can-you-tell-us-about-a-time-you-made-a-bad-decision-at-work)\n- [Self improvement](what-have-you-done-to-improve-yourself-in-the-past-year)\n- [Work improvement](can-you-tell-us-about-something-you-ve-taken-on-and-improved-at-your-work)\n- [Constructive criticism](what-is-one-piece-of-really-valuable-constructive-feedback-you-have-received)\n- [Outside your comfort zone](can-you-tell-us-about-a-time-when-you-felt-you-were-working-outside-of-your-comfort-zone)\n- [Pushing yourself](can-you-tell-us-about-a-time-when-you-or-your-team-had-to-push-yourself-to-reach-a-goal)\n- [Stress](what-causes-you-stress-negative-feelings-at-work)\n- [Positivity](what-gives-you-positive-energy-at-work)\n- [Parking Spaces](you-ve-been-contracted-to-design-a-system-for-a-parking-garage-that-shows-how-many-spaces-are-available)\n- [Automation](is-there-a-process-or-workflow-you-wouldn-t-automate-why)\n- [Testing](talk-to-us-about-testing-in-software-or-ia-c)\n- [Pipelines](how-much-hands-on-work-have-you-done-working-on-pipelines-and-software-delivery-or-pipelines-for-infrastructure-creation)\n- [AWS Deployment](tell-me-about-a-project-where-you-had-to-automate-its-deployment-to-aws)\n- [Hard things to automate](tell-us-about-something-that-was-really-hard-to-automate-anywhere-not-just-aws)\n- [Branching](do-you-have-a-strong-opinion-about-code-branches-and-deployment-strategies)\n- [Learning a new skill](tell-me-about-a-time-when-you-had-to-learn-a-new-tool-language-or-skill)\n- [Resource creation](provide-some-examples-of-resources-that-you-ve-provided-for-others-in-the-development-community-and-or-within-companies-in-which-you-worked-e-g-blog-posts-articles-open-source-projects)\n- [Difficult customers](tell-me-about-a-time-when-you-ve-worked-with-a-difficult-customer-or-client)\n\n---\n\n### Who would you credit for helping you get to where you are now?\n\n### Can you tell us about a time you’ve had to mediate a conflict in your team?\n\n### Tell us about a recent time where you helped somebody at work without being asked?\n\nWhen I joined [MEGA_CORP], the React project was quite a few versions behind. The React team chose to deprecate Enzyme in favor of React Testing Library in React 16. Enzyme tests have a few disadvantages to RTL (React Testing Library). They're more verbose. It's easy to make a brittle test as they lend themselves to testing internals rather than UI. Of course, they're also deprecated and will need to be rewritten.\n\nIt was in my first week when I found this out. I DM'd the lead and asked if I could install the needed libraries for RTL. He said sure, as long as I can get everything to work with the existing app. Luckily, That was extremely straightforward. I quickly wrote the tests and presented a draft PR to the team. In the PR, I highlighted a couple of the things that I'd done. I then offered via DM to host a quick walk-through of how RTL works if anyone wanted.\n\nI left out my opinions about never writing deprecated code and how to evolve a codebase from Enzyme to RTL. I was brand new to the team. It seemed to me, given the state of the codebase and the fact that I didn't yet know the goals of the project, that setting a decent pattern that could be copy-pasted and making myself open for questions and a presentation would be the ideal level of impact.\n\n### Can you talk to us about a project or piece of work where you feel you demonstrated significant personal ownership?\n\n### Can you tell us about a time you made a bad decision at work?\n\nI used dependency injection when copy-paste would have been a superior solution. I try to use AHA ([Avoid Hasty Abstractions](https://kentcdodds.com/blog/aha-programming])) programming as a sensible default. For this project, we had three different business domains that all shared a contract view. Once in that view, the logic got complex. To untangle it all, I picked a state machine library. This would allow the team to understand what was happening in the codebase easier. More importantly, state machines are an excellent tool for communicating with business, design, and product stakeholders. The team had received a lot of bugs in this area of the codebase. In fact, these weren't bugs at all. Rather, they were requests for subtle features and needs that we didn't understand originally. My hope was that using state charts would solve the business -> developer communication along with helping the team understand a complex area in the codebase.\n\nWhat we did was write a function that spawned a state machine, injecting the rules for the current business domain in context. This was an acceptable solution. It was at least the second-best solution in hindsight.\n\nWhat I failed to think through was that state machines are new to most engineers, especially on the front end. What I should have done was used three machines, one for each business domain, and accepted the code duplication. This would have made machines that were easier to understand. Kept business rules isolated by domain and allowed for examples of state machines that were easy to understand. This would have allowed for state machines to spread more naturally throughout the organization.\n\n### What have you done to improve yourself in the past year?\n\nMy most effective strategy for self-improvement is flashcard usage. I use Anki, which is a spaced repetition flashcard application. I primarily use it for three kinds of flash cards.\n\n- Productivity\n- Code patterns\n- Concepts I want to recall\n\nProductivity is the most straightforward. When I encounter a shortcut, VSCode extension, or tool for a task, I'll make flashcards to learn it. The current one is actually from Emmet when I want to wrap some text in HTML. Copy selection, access the command palette, type wrap, hit enter, then the tag you want (span, p, etc.). This comes in handy. The flash card was super quick to learn. But spaced repetition will keep it top of mind until it's muscle memory.\n\nCode patterns are a little more nuanced. I pretty regularly do code puzzles, think LeetCode, but not the hard problems. Generally, those patterns aren't practical for my everyday work, but they come in handy. A recent one is to get all possible pairs from `[2,4,6,8]`. This is straightforward. When I solve that in the code puzzle (or look it up after stumbling over it), I'll drop it on a flash card. Sometimes, I'll remember the exact code snippet when I encounter that problem in real life. Usually, I'll only recall that what I want is to slice the array and use the index to make the pair. So I'll have a starting point. That fuzzy memory helps a lot.\n\nConcepts I want to recall can be pretty broad. A decent example of this would be studying for the AWS Cloud Certified Practitioner exam. I also have decks that are more philosophical or personal as well.\n\n### Can you tell us about something you’ve taken on and improved at your work?\n\nMy current project has had some trouble keeping dependencies up to date. In this case, we can't just turn on Dependabot and work through it, as many dependencies are more than four years behind. As a result, I started a plan to do new sprint Monday dependency updates. On Mondays, we'll make a PR that updates at least one dependency. This plan has a few benefits.\n\nKeeping the scope small will help engineers on our team who aren't comfortable with dependency updates. Because our test suite isn't robust, doing it on Mondays gives us time to smoke-test the application. Finally, this gradual approach meets the business goals of the team.\n\nEvery developer wants to move to the latest and greatest platform. I'm certainly no different in that regard. The challenge is to be able to balance the desire to work with modern tools with the needs of the business. In this case, our deprecated tools are holding us back, so updating them is a priority. However, the business needs are such that we must find a way to get us to a more modern toolchain and deliver our regular sprint work. This strategy seems like an appropriate compromise.\n\n### What is one piece of really valuable constructive feedback you have received?\n\n### Can you tell us about a time when you felt you were working outside of your comfort zone?\n\nLearning Data Structures and Algorithms. I'm not a traditional computer science student. Nonetheless, I think there's a lot of value\n\n### Can you tell us about a time when you or your team had to push yourself to reach a goal?\n\n### What causes you stress/negative feelings at work?\n\nLack of autonomy and lack of clarity.\n\n### What gives you positive energy at work?\n\nFor me, it's pair programming. I enjoy pairing with developers of all skill levels. Pairing with newer developers is fun. It teaches me how to communicate, think quickly and clearly explain why I like a solution or idea. Pairing with more seasoned developers frequently ends up in TDD or ping-pong-style pairing. Falling into a ping-pong rhythm with another developer is one of the best flow experiences. Often, pairing with more senior folks ends up with a Miro board or Excalidraw open so we can explore possible solutions or architectures.\n\nOne of my favorite things about pairing is that it's the most natural way to teach each other tools and productivity tips. I liberally use multi-cursor, which frequently blows a junior developer's mind. Just recently, from another senior engineer, I learned about Thunder Client as a Postman alternative. It's right in your editor. Delightful!\n\nPairing also has the benefit of building strong relationships between developers and teams. It normalizes knowledge sharing. Especially with the expansion of remote work, I'm excited to see more companies and teams get comfortable pairing.\n\n### You've been contracted to design a system for a parking garage that shows how many spaces are available.\n\nBefore starting, there are a few questions that I'd need to answer. The first thing I'd want to know is whether there are types of spaces. I'm familiar with garages that have long-term, resident, and short-term spaces. This would help me plan for future changes to my schema. Next, I'd want to know about expansion for the garage, as well as space type. It's important to understand how the number and space type may change over time. I'd also need to know how this information should be displayed and consumed. Do I have a visual interface like a light board, or do I have an API that I need to respond to, like SomeParkingApp.com? Finally, I'd like to know about the pricing for parking spaces. Do I need to consider parking rates, free days, size of vehicle hours, and so on?\n\nI like a queue or event bus for this application. Mostly, nothing is happening in a parking garage, but we can't miss any parking events so serverless makes a lot of sense here. No need to run a server constantly when it's only used when parking starts or ends. If we're using a queue or event bus we can easily add subscribers to events like PARKING_START and PARKING_END. That way if in the future we want an analytics service to determine the most popular parking times, it's straightforward.\n\nFor a quick solution to the problem, parking spots are essentially a fixed-size array. Each slot might hold an object, including vehicle type, license plate, and time parking started for example. For a query like, how many spots are available, we can just find empty slots in the array. Something else we might need is the total price for a parking event. We can look up the vehicle by its UUID (license plate) and then send the information to the payment service. In this case, I'm considering type (maybe a large pickup truck costs more) and start time. The service can calculate pricing based on the rules it has and return that to the checkout. Once payment is complete, we'd fire an event back to the parking spot service to remove that vehicle from the array.\n\n### Is there a process or workflow you wouldn’t automate? Why?\n\n### “Talk to us about testing in software or IaC\n\n### How much hands-on work have you done working on pipelines and software delivery, or pipelines for infrastructure creation?\n\n### Tell me about a project where you had to automate its deployment to AWS…\n\n### Tell us about something that was really hard to automate (anywhere, not just AWS)\n\n### Do you have a strong opinion about code branches and deployment strategies?\n\n### Tell me about a time when you had to learn a new tool, language or skill?\n\n### Provide some examples of resources that you’ve provided for others in the development community and/or within companies in which you worked (e.g. blog posts/articles, open source projects/contributions, podcasts, internal company talks, conferences, etc.)\n\n### Tell me about a time when you’ve worked with a difficult customer or client?","src/content/blog/interview-questions.md","72352c519e009ba4",{"html":137,"metadata":138},"\u003Cp>What follows are a series of interview questions that I crowd-sourced and my answers. I don’t expect that these questions would be asked in 100% of interviews. Rather, I expect that thinking through my answers to these questions will allow me to have more useful answers over time. Additionally, if I feel like an answer performed poorly in an interview, I can reassess these answers and look to say something more meaningful. One hope is that I’ll be able to use the structure of these answers to help me when I’m asked something that falls out of the bounds of what I’ve considered in advance.\u003C/p>\n\u003Chr>\n\u003Ch4 id=\"list-of-questions\">List of questions:\u003C/h4>\n\u003Cul>\n\u003Cli>\u003Ca href=\"#who-would-you-credit-for-helping-you-get-to-where-you-are-now\">How did you get here\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"can-you-tell-us-about-a-time-you-ve-had-to-mediate-a-conflict-in-your-team\">Mediate a conflict\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"tell-us-about-a-recent-time-where-you-helped-somebody-at-work-without-being-asked\">Helping without being asked\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"can-you-talk-to-us-about-a-project-or-piece-of-work-where-you-feel-you-demonstrated-significant-personal-ownership\">Personal ownership\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"can-you-tell-us-about-a-time-you-made-a-bad-decision-at-work\">Bad decision\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"what-have-you-done-to-improve-yourself-in-the-past-year\">Self improvement\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"can-you-tell-us-about-something-you-ve-taken-on-and-improved-at-your-work\">Work improvement\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"what-is-one-piece-of-really-valuable-constructive-feedback-you-have-received\">Constructive criticism\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"can-you-tell-us-about-a-time-when-you-felt-you-were-working-outside-of-your-comfort-zone\">Outside your comfort zone\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"can-you-tell-us-about-a-time-when-you-or-your-team-had-to-push-yourself-to-reach-a-goal\">Pushing yourself\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"what-causes-you-stress-negative-feelings-at-work\">Stress\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"what-gives-you-positive-energy-at-work\">Positivity\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"you-ve-been-contracted-to-design-a-system-for-a-parking-garage-that-shows-how-many-spaces-are-available\">Parking Spaces\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"is-there-a-process-or-workflow-you-wouldn-t-automate-why\">Automation\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"talk-to-us-about-testing-in-software-or-ia-c\">Testing\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"how-much-hands-on-work-have-you-done-working-on-pipelines-and-software-delivery-or-pipelines-for-infrastructure-creation\">Pipelines\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"tell-me-about-a-project-where-you-had-to-automate-its-deployment-to-aws\">AWS Deployment\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"tell-us-about-something-that-was-really-hard-to-automate-anywhere-not-just-aws\">Hard things to automate\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"do-you-have-a-strong-opinion-about-code-branches-and-deployment-strategies\">Branching\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"tell-me-about-a-time-when-you-had-to-learn-a-new-tool-language-or-skill\">Learning a new skill\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"provide-some-examples-of-resources-that-you-ve-provided-for-others-in-the-development-community-and-or-within-companies-in-which-you-worked-e-g-blog-posts-articles-open-source-projects\">Resource creation\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"tell-me-about-a-time-when-you-ve-worked-with-a-difficult-customer-or-client\">Difficult customers\u003C/a>\u003C/li>\n\u003C/ul>\n\u003Chr>\n\u003Ch3 id=\"who-would-you-credit-for-helping-you-get-to-where-you-are-now\">Who would you credit for helping you get to where you are now?\u003C/h3>\n\u003Ch3 id=\"can-you-tell-us-about-a-time-youve-had-to-mediate-a-conflict-in-your-team\">Can you tell us about a time you’ve had to mediate a conflict in your team?\u003C/h3>\n\u003Ch3 id=\"tell-us-about-a-recent-time-where-you-helped-somebody-at-work-without-being-asked\">Tell us about a recent time where you helped somebody at work without being asked?\u003C/h3>\n\u003Cp>When I joined [MEGA_CORP], the React project was quite a few versions behind. The React team chose to deprecate Enzyme in favor of React Testing Library in React 16. Enzyme tests have a few disadvantages to RTL (React Testing Library). They’re more verbose. It’s easy to make a brittle test as they lend themselves to testing internals rather than UI. Of course, they’re also deprecated and will need to be rewritten.\u003C/p>\n\u003Cp>It was in my first week when I found this out. I DM’d the lead and asked if I could install the needed libraries for RTL. He said sure, as long as I can get everything to work with the existing app. Luckily, That was extremely straightforward. I quickly wrote the tests and presented a draft PR to the team. In the PR, I highlighted a couple of the things that I’d done. I then offered via DM to host a quick walk-through of how RTL works if anyone wanted.\u003C/p>\n\u003Cp>I left out my opinions about never writing deprecated code and how to evolve a codebase from Enzyme to RTL. I was brand new to the team. It seemed to me, given the state of the codebase and the fact that I didn’t yet know the goals of the project, that setting a decent pattern that could be copy-pasted and making myself open for questions and a presentation would be the ideal level of impact.\u003C/p>\n\u003Ch3 id=\"can-you-talk-to-us-about-a-project-or-piece-of-work-where-you-feel-you-demonstrated-significant-personal-ownership\">Can you talk to us about a project or piece of work where you feel you demonstrated significant personal ownership?\u003C/h3>\n\u003Ch3 id=\"can-you-tell-us-about-a-time-you-made-a-bad-decision-at-work\">Can you tell us about a time you made a bad decision at work?\u003C/h3>\n\u003Cp>I used dependency injection when copy-paste would have been a superior solution. I try to use AHA (\u003Ca href=\"https://kentcdodds.com/blog/aha-programming%5D\">Avoid Hasty Abstractions\u003C/a>) programming as a sensible default. For this project, we had three different business domains that all shared a contract view. Once in that view, the logic got complex. To untangle it all, I picked a state machine library. This would allow the team to understand what was happening in the codebase easier. More importantly, state machines are an excellent tool for communicating with business, design, and product stakeholders. The team had received a lot of bugs in this area of the codebase. In fact, these weren’t bugs at all. Rather, they were requests for subtle features and needs that we didn’t understand originally. My hope was that using state charts would solve the business -> developer communication along with helping the team understand a complex area in the codebase.\u003C/p>\n\u003Cp>What we did was write a function that spawned a state machine, injecting the rules for the current business domain in context. This was an acceptable solution. It was at least the second-best solution in hindsight.\u003C/p>\n\u003Cp>What I failed to think through was that state machines are new to most engineers, especially on the front end. What I should have done was used three machines, one for each business domain, and accepted the code duplication. This would have made machines that were easier to understand. Kept business rules isolated by domain and allowed for examples of state machines that were easy to understand. This would have allowed for state machines to spread more naturally throughout the organization.\u003C/p>\n\u003Ch3 id=\"what-have-you-done-to-improve-yourself-in-the-past-year\">What have you done to improve yourself in the past year?\u003C/h3>\n\u003Cp>My most effective strategy for self-improvement is flashcard usage. I use Anki, which is a spaced repetition flashcard application. I primarily use it for three kinds of flash cards.\u003C/p>\n\u003Cul>\n\u003Cli>Productivity\u003C/li>\n\u003Cli>Code patterns\u003C/li>\n\u003Cli>Concepts I want to recall\u003C/li>\n\u003C/ul>\n\u003Cp>Productivity is the most straightforward. When I encounter a shortcut, VSCode extension, or tool for a task, I’ll make flashcards to learn it. The current one is actually from Emmet when I want to wrap some text in HTML. Copy selection, access the command palette, type wrap, hit enter, then the tag you want (span, p, etc.). This comes in handy. The flash card was super quick to learn. But spaced repetition will keep it top of mind until it’s muscle memory.\u003C/p>\n\u003Cp>Code patterns are a little more nuanced. I pretty regularly do code puzzles, think LeetCode, but not the hard problems. Generally, those patterns aren’t practical for my everyday work, but they come in handy. A recent one is to get all possible pairs from \u003Ccode>[2,4,6,8]\u003C/code>. This is straightforward. When I solve that in the code puzzle (or look it up after stumbling over it), I’ll drop it on a flash card. Sometimes, I’ll remember the exact code snippet when I encounter that problem in real life. Usually, I’ll only recall that what I want is to slice the array and use the index to make the pair. So I’ll have a starting point. That fuzzy memory helps a lot.\u003C/p>\n\u003Cp>Concepts I want to recall can be pretty broad. A decent example of this would be studying for the AWS Cloud Certified Practitioner exam. I also have decks that are more philosophical or personal as well.\u003C/p>\n\u003Ch3 id=\"can-you-tell-us-about-something-youve-taken-on-and-improved-at-your-work\">Can you tell us about something you’ve taken on and improved at your work?\u003C/h3>\n\u003Cp>My current project has had some trouble keeping dependencies up to date. In this case, we can’t just turn on Dependabot and work through it, as many dependencies are more than four years behind. As a result, I started a plan to do new sprint Monday dependency updates. On Mondays, we’ll make a PR that updates at least one dependency. This plan has a few benefits.\u003C/p>\n\u003Cp>Keeping the scope small will help engineers on our team who aren’t comfortable with dependency updates. Because our test suite isn’t robust, doing it on Mondays gives us time to smoke-test the application. Finally, this gradual approach meets the business goals of the team.\u003C/p>\n\u003Cp>Every developer wants to move to the latest and greatest platform. I’m certainly no different in that regard. The challenge is to be able to balance the desire to work with modern tools with the needs of the business. In this case, our deprecated tools are holding us back, so updating them is a priority. However, the business needs are such that we must find a way to get us to a more modern toolchain and deliver our regular sprint work. This strategy seems like an appropriate compromise.\u003C/p>\n\u003Ch3 id=\"what-is-one-piece-of-really-valuable-constructive-feedback-you-have-received\">What is one piece of really valuable constructive feedback you have received?\u003C/h3>\n\u003Ch3 id=\"can-you-tell-us-about-a-time-when-you-felt-you-were-working-outside-of-your-comfort-zone\">Can you tell us about a time when you felt you were working outside of your comfort zone?\u003C/h3>\n\u003Cp>Learning Data Structures and Algorithms. I’m not a traditional computer science student. Nonetheless, I think there’s a lot of value\u003C/p>\n\u003Ch3 id=\"can-you-tell-us-about-a-time-when-you-or-your-team-had-to-push-yourself-to-reach-a-goal\">Can you tell us about a time when you or your team had to push yourself to reach a goal?\u003C/h3>\n\u003Ch3 id=\"what-causes-you-stressnegative-feelings-at-work\">What causes you stress/negative feelings at work?\u003C/h3>\n\u003Cp>Lack of autonomy and lack of clarity.\u003C/p>\n\u003Ch3 id=\"what-gives-you-positive-energy-at-work\">What gives you positive energy at work?\u003C/h3>\n\u003Cp>For me, it’s pair programming. I enjoy pairing with developers of all skill levels. Pairing with newer developers is fun. It teaches me how to communicate, think quickly and clearly explain why I like a solution or idea. Pairing with more seasoned developers frequently ends up in TDD or ping-pong-style pairing. Falling into a ping-pong rhythm with another developer is one of the best flow experiences. Often, pairing with more senior folks ends up with a Miro board or Excalidraw open so we can explore possible solutions or architectures.\u003C/p>\n\u003Cp>One of my favorite things about pairing is that it’s the most natural way to teach each other tools and productivity tips. I liberally use multi-cursor, which frequently blows a junior developer’s mind. Just recently, from another senior engineer, I learned about Thunder Client as a Postman alternative. It’s right in your editor. Delightful!\u003C/p>\n\u003Cp>Pairing also has the benefit of building strong relationships between developers and teams. It normalizes knowledge sharing. Especially with the expansion of remote work, I’m excited to see more companies and teams get comfortable pairing.\u003C/p>\n\u003Ch3 id=\"youve-been-contracted-to-design-a-system-for-a-parking-garage-that-shows-how-many-spaces-are-available\">You’ve been contracted to design a system for a parking garage that shows how many spaces are available.\u003C/h3>\n\u003Cp>Before starting, there are a few questions that I’d need to answer. The first thing I’d want to know is whether there are types of spaces. I’m familiar with garages that have long-term, resident, and short-term spaces. This would help me plan for future changes to my schema. Next, I’d want to know about expansion for the garage, as well as space type. It’s important to understand how the number and space type may change over time. I’d also need to know how this information should be displayed and consumed. Do I have a visual interface like a light board, or do I have an API that I need to respond to, like SomeParkingApp.com? Finally, I’d like to know about the pricing for parking spaces. Do I need to consider parking rates, free days, size of vehicle hours, and so on?\u003C/p>\n\u003Cp>I like a queue or event bus for this application. Mostly, nothing is happening in a parking garage, but we can’t miss any parking events so serverless makes a lot of sense here. No need to run a server constantly when it’s only used when parking starts or ends. If we’re using a queue or event bus we can easily add subscribers to events like PARKING_START and PARKING_END. That way if in the future we want an analytics service to determine the most popular parking times, it’s straightforward.\u003C/p>\n\u003Cp>For a quick solution to the problem, parking spots are essentially a fixed-size array. Each slot might hold an object, including vehicle type, license plate, and time parking started for example. For a query like, how many spots are available, we can just find empty slots in the array. Something else we might need is the total price for a parking event. We can look up the vehicle by its UUID (license plate) and then send the information to the payment service. In this case, I’m considering type (maybe a large pickup truck costs more) and start time. The service can calculate pricing based on the rules it has and return that to the checkout. Once payment is complete, we’d fire an event back to the parking spot service to remove that vehicle from the array.\u003C/p>\n\u003Ch3 id=\"is-there-a-process-or-workflow-you-wouldnt-automate-why\">Is there a process or workflow you wouldn’t automate? Why?\u003C/h3>\n\u003Ch3 id=\"talk-to-us-about-testing-in-software-or-iac\">“Talk to us about testing in software or IaC\u003C/h3>\n\u003Ch3 id=\"how-much-hands-on-work-have-you-done-working-on-pipelines-and-software-delivery-or-pipelines-for-infrastructure-creation\">How much hands-on work have you done working on pipelines and software delivery, or pipelines for infrastructure creation?\u003C/h3>\n\u003Ch3 id=\"tell-me-about-a-project-where-you-had-to-automate-its-deployment-to-aws\">Tell me about a project where you had to automate its deployment to AWS…\u003C/h3>\n\u003Ch3 id=\"tell-us-about-something-that-was-really-hard-to-automate-anywhere-not-just-aws\">Tell us about something that was really hard to automate (anywhere, not just AWS)\u003C/h3>\n\u003Ch3 id=\"do-you-have-a-strong-opinion-about-code-branches-and-deployment-strategies\">Do you have a strong opinion about code branches and deployment strategies?\u003C/h3>\n\u003Ch3 id=\"tell-me-about-a-time-when-you-had-to-learn-a-new-tool-language-or-skill\">Tell me about a time when you had to learn a new tool, language or skill?\u003C/h3>\n\u003Ch3 id=\"provide-some-examples-of-resources-that-youve-provided-for-others-in-the-development-community-andor-within-companies-in-which-you-worked-eg-blog-postsarticles-open-source-projectscontributions-podcasts-internal-company-talks-conferences-etc\">Provide some examples of resources that you’ve provided for others in the development community and/or within companies in which you worked (e.g. blog posts/articles, open source projects/contributions, podcasts, internal company talks, conferences, etc.)\u003C/h3>\n\u003Ch3 id=\"tell-me-about-a-time-when-youve-worked-with-a-difficult-customer-or-client\">Tell me about a time when you’ve worked with a difficult customer or client?\u003C/h3>",{"headings":139,"imagePaths":209,"frontmatter":129},[140,143,146,149,152,155,158,161,164,167,170,173,176,179,182,185,188,191,194,197,200,203,206],{"depth":64,"slug":141,"text":142},"list-of-questions","List of questions:",{"depth":47,"slug":144,"text":145},"who-would-you-credit-for-helping-you-get-to-where-you-are-now","Who would you credit for helping you get to where you are now?",{"depth":47,"slug":147,"text":148},"can-you-tell-us-about-a-time-youve-had-to-mediate-a-conflict-in-your-team","Can you tell us about a time you’ve had to mediate a conflict in your team?",{"depth":47,"slug":150,"text":151},"tell-us-about-a-recent-time-where-you-helped-somebody-at-work-without-being-asked","Tell us about a recent time where you helped somebody at work without being asked?",{"depth":47,"slug":153,"text":154},"can-you-talk-to-us-about-a-project-or-piece-of-work-where-you-feel-you-demonstrated-significant-personal-ownership","Can you talk to us about a project or piece of work where you feel you demonstrated significant personal ownership?",{"depth":47,"slug":156,"text":157},"can-you-tell-us-about-a-time-you-made-a-bad-decision-at-work","Can you tell us about a time you made a bad decision at work?",{"depth":47,"slug":159,"text":160},"what-have-you-done-to-improve-yourself-in-the-past-year","What have you done to improve yourself in the past year?",{"depth":47,"slug":162,"text":163},"can-you-tell-us-about-something-youve-taken-on-and-improved-at-your-work","Can you tell us about something you’ve taken on and improved at your work?",{"depth":47,"slug":165,"text":166},"what-is-one-piece-of-really-valuable-constructive-feedback-you-have-received","What is one piece of really valuable constructive feedback you have received?",{"depth":47,"slug":168,"text":169},"can-you-tell-us-about-a-time-when-you-felt-you-were-working-outside-of-your-comfort-zone","Can you tell us about a time when you felt you were working outside of your comfort zone?",{"depth":47,"slug":171,"text":172},"can-you-tell-us-about-a-time-when-you-or-your-team-had-to-push-yourself-to-reach-a-goal","Can you tell us about a time when you or your team had to push yourself to reach a goal?",{"depth":47,"slug":174,"text":175},"what-causes-you-stressnegative-feelings-at-work","What causes you stress/negative feelings at work?",{"depth":47,"slug":177,"text":178},"what-gives-you-positive-energy-at-work","What gives you positive energy at work?",{"depth":47,"slug":180,"text":181},"youve-been-contracted-to-design-a-system-for-a-parking-garage-that-shows-how-many-spaces-are-available","You’ve been contracted to design a system for a parking garage that shows how many spaces are available.",{"depth":47,"slug":183,"text":184},"is-there-a-process-or-workflow-you-wouldnt-automate-why","Is there a process or workflow you wouldn’t automate? Why?",{"depth":47,"slug":186,"text":187},"talk-to-us-about-testing-in-software-or-iac","“Talk to us about testing in software or IaC",{"depth":47,"slug":189,"text":190},"how-much-hands-on-work-have-you-done-working-on-pipelines-and-software-delivery-or-pipelines-for-infrastructure-creation","How much hands-on work have you done working on pipelines and software delivery, or pipelines for infrastructure creation?",{"depth":47,"slug":192,"text":193},"tell-me-about-a-project-where-you-had-to-automate-its-deployment-to-aws","Tell me about a project where you had to automate its deployment to AWS…",{"depth":47,"slug":195,"text":196},"tell-us-about-something-that-was-really-hard-to-automate-anywhere-not-just-aws","Tell us about something that was really hard to automate (anywhere, not just AWS)",{"depth":47,"slug":198,"text":199},"do-you-have-a-strong-opinion-about-code-branches-and-deployment-strategies","Do you have a strong opinion about code branches and deployment strategies?",{"depth":47,"slug":201,"text":202},"tell-me-about-a-time-when-you-had-to-learn-a-new-tool-language-or-skill","Tell me about a time when you had to learn a new tool, language or skill?",{"depth":47,"slug":204,"text":205},"provide-some-examples-of-resources-that-youve-provided-for-others-in-the-development-community-andor-within-companies-in-which-you-worked-eg-blog-postsarticles-open-source-projectscontributions-podcasts-internal-company-talks-conferences-etc","Provide some examples of resources that you’ve provided for others in the development community and/or within companies in which you worked (e.g. blog posts/articles, open source projects/contributions, podcasts, internal company talks, conferences, etc.)",{"depth":47,"slug":207,"text":208},"tell-me-about-a-time-when-youve-worked-with-a-difficult-customer-or-client","Tell me about a time when you’ve worked with a difficult customer or client?",[],"interview-questions.md","simple-table",{"id":211,"data":213,"body":217,"filePath":218,"digest":219,"rendered":220,"legacyId":231},{"title":214,"description":215,"date":216,"revisions":15},"Tables are hard in lots of ways","A bunch of examples of tables with React and Tailwind","2023-01-31","Mostly, tasks on the front end are either create a form that does something or create a table that displays something. Setting aside for a moment that really, that's now how people want data presented to them it's a task you're bound to get as a developer. This post serves to note all the table experiences that I've gathered along the way.\n\n### Simplest Example\n\nLet's start with some reasonable sample data.\n\n```js\n// list of comic book titles\nconst comicData = [\n  {\n    id: 1,\n    name: \"Spider-man\",\n    publisher: \"Marvel\",\n    initialPublishDate: \"1962-08-01\",\n  },\n  {\n    id: 2,\n    name: \"Miles Morales: Spider-man\",\n    publisher: \"Marvel\",\n    initialPublishDate: \"2011-10-01\",\n  },\n  {\n    id: 3,\n    name: \"Saga\",\n    publisher: \"Image\",\n    initialPublishDate: \"2012-08-01\",\n  },\n  {\n    id: 4,\n    name: \"What's the Furthest Place from Here?\",\n    publisher: \"Image\",\n    initialPublishDate: \"2019-08-01\",\n  },\n];\n```\n\nWe can set up some columns for our table.\n\n```js\nconst columns: ColumnDef\u003CTComicBook>[] = [\n  {\n    accessorKey: \"name\",\n    cell: (info) => info.getValue(),\n    header: \"Comic Book Name\",\n  },\n  {\n    accessorKey: \"publisher\",\n    cell: (info) => info.getValue(),\n    header: \"Publisher\",\n  },\n  {\n    accessorKey: \"initialPublishDate\",\n    cell: (info) =>\n      new Date(info.getValue()).toLocaleDateString(\"en-US\", {\n        month: \"long\",\n        year: \"numeric\",\n      }),\n    header: \"Comic Book Name\",\n  },\n];\n```\n\nNow using TanStack Table we can create a table with the following code.\n\n```js\nconst table = useReactTable({\n  data,\n  columns,\n  getCoreRowModel: getCoreRowModel(),\n});\n```\n\nWe'll fancy it up a bit with Tailwind.\n\n```js\n\u003Ctable className=\"table border-collapse border border-slate-500\">\n  \u003Cthead>\n    {table.getHeaderGroups().map((headerGroup) => (\n      \u003Ctr key={headerGroup.id}>\n        {headerGroup.headers.map((header) => (\n          \u003Cth className=\"border border-slate-600 p-4\" key={header.id}>\n            {flexRender(header.column.columnDef.header, header.getContext())}\n          \u003C/th>\n        ))}\n      \u003C/tr>\n    ))}\n  \u003C/thead>\n  \u003Ctbody>\n    {table.getRowModel().rows.map((row, index) => (\n      \u003Ctr key={row.id} className={`border ${index % 2 && \"bg-gray-200\"}`}>\n        {row.getVisibleCells().map((cell) => (\n          \u003Ctd className=\"border border-slate-600 p-4\" key={cell.id}>\n            {flexRender(cell.column.columnDef.cell, cell.getContext())}\n          \u003C/td>\n        ))}\n      \u003C/tr>\n    ))}\n  \u003C/tbody>\n\u003C/table>\n```\n\nIf you haven't seen headless tables rendered the above might look weird. The neat thing is that you are in complete control of the tables style. This saves so many headaches that sneak up on you when you pick a table library.\n\nThere's a couple fun table things that are worth noticing here. For styling, `border-collapse` comes in handy when styling tables. This keeps you from having to style the borders on every cell. If you're not used to styling things, this is one you'll want to use. The other is that when we want to do a data transformation we can do it in the column definition. This keeps logic for presentation in one place. It's very easy to have tables that get out of hand with logic in the wrong place.\n\n### Sorting","src/content/blog/simple-table.md","8cf637cd789c16be",{"html":221,"metadata":222},"\u003Cp>Mostly, tasks on the front end are either create a form that does something or create a table that displays something. Setting aside for a moment that really, that’s now how people want data presented to them it’s a task you’re bound to get as a developer. This post serves to note all the table experiences that I’ve gathered along the way.\u003C/p>\n\u003Ch3 id=\"simplest-example\">Simplest Example\u003C/h3>\n\u003Cp>Let’s start with some reasonable sample data.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// list of comic book titles\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> comicData\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> [\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    id: \u003C/span>\u003Cspan style=\"color:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    name: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"Spider-man\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    publisher: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"Marvel\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    initialPublishDate: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"1962-08-01\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  },\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    id: \u003C/span>\u003Cspan style=\"color:#79B8FF\">2\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    name: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"Miles Morales: Spider-man\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    publisher: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"Marvel\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    initialPublishDate: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"2011-10-01\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  },\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    id: \u003C/span>\u003Cspan style=\"color:#79B8FF\">3\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    name: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"Saga\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    publisher: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"Image\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    initialPublishDate: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"2012-08-01\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  },\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    id: \u003C/span>\u003Cspan style=\"color:#79B8FF\">4\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    name: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"What's the Furthest Place from Here?\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    publisher: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"Image\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    initialPublishDate: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"2019-08-01\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  },\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">];\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>We can set up some columns for our table.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> columns\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#B392F0\"> ColumnDef\u003C/span>\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#B392F0\">TComicBook\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>[] \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> [\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    accessorKey: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"name\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">    cell\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: (\u003C/span>\u003Cspan style=\"color:#FFAB70\">info\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> info.\u003C/span>\u003Cspan style=\"color:#B392F0\">getValue\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(),\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    header: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"Comic Book Name\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  },\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    accessorKey: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"publisher\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">    cell\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: (\u003C/span>\u003Cspan style=\"color:#FFAB70\">info\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> info.\u003C/span>\u003Cspan style=\"color:#B392F0\">getValue\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(),\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    header: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"Publisher\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  },\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    accessorKey: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"initialPublishDate\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">    cell\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: (\u003C/span>\u003Cspan style=\"color:#FFAB70\">info\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">      new\u003C/span>\u003Cspan style=\"color:#B392F0\"> Date\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(info.\u003C/span>\u003Cspan style=\"color:#B392F0\">getValue\u003C/span>\u003Cspan style=\"color:#E1E4E8\">()).\u003C/span>\u003Cspan style=\"color:#B392F0\">toLocaleDateString\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"en-US\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        month: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"long\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        year: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"numeric\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      }),\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    header: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"Comic Book Name\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  },\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">];\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Now using TanStack Table we can create a table with the following code.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> table\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#B392F0\"> useReactTable\u003C/span>\u003Cspan style=\"color:#E1E4E8\">({\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  data,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  columns,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  getCoreRowModel: \u003C/span>\u003Cspan style=\"color:#B392F0\">getCoreRowModel\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(),\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">});\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>We’ll fancy it up a bit with Tailwind.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#85E89D\">table\u003C/span>\u003Cspan style=\"color:#B392F0\"> className\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"table border-collapse border border-slate-500\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  &#x3C;\u003C/span>\u003Cspan style=\"color:#85E89D\">thead\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    {table.\u003C/span>\u003Cspan style=\"color:#B392F0\">getHeaderGroups\u003C/span>\u003Cspan style=\"color:#E1E4E8\">().\u003C/span>\u003Cspan style=\"color:#B392F0\">map\u003C/span>\u003Cspan style=\"color:#E1E4E8\">((\u003C/span>\u003Cspan style=\"color:#FFAB70\">headerGroup\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      &#x3C;\u003C/span>\u003Cspan style=\"color:#85E89D\">tr\u003C/span>\u003Cspan style=\"color:#B392F0\"> key\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\">{headerGroup.id}>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        {headerGroup.headers.\u003C/span>\u003Cspan style=\"color:#B392F0\">map\u003C/span>\u003Cspan style=\"color:#E1E4E8\">((\u003C/span>\u003Cspan style=\"color:#FFAB70\">header\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">          &#x3C;\u003C/span>\u003Cspan style=\"color:#85E89D\">th\u003C/span>\u003Cspan style=\"color:#B392F0\"> className\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"border border-slate-600 p-4\"\u003C/span>\u003Cspan style=\"color:#B392F0\"> key\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\">{header.id}>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">            {\u003C/span>\u003Cspan style=\"color:#B392F0\">flexRender\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(header.column.columnDef.header, header.\u003C/span>\u003Cspan style=\"color:#B392F0\">getContext\u003C/span>\u003Cspan style=\"color:#E1E4E8\">())}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">          &#x3C;/\u003C/span>\u003Cspan style=\"color:#85E89D\">th\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        ))}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      &#x3C;/\u003C/span>\u003Cspan style=\"color:#85E89D\">tr\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    ))}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  &#x3C;/\u003C/span>\u003Cspan style=\"color:#85E89D\">thead\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  &#x3C;\u003C/span>\u003Cspan style=\"color:#85E89D\">tbody\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    {table.\u003C/span>\u003Cspan style=\"color:#B392F0\">getRowModel\u003C/span>\u003Cspan style=\"color:#E1E4E8\">().rows.\u003C/span>\u003Cspan style=\"color:#B392F0\">map\u003C/span>\u003Cspan style=\"color:#E1E4E8\">((\u003C/span>\u003Cspan style=\"color:#FFAB70\">row\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#FFAB70\">index\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      &#x3C;\u003C/span>\u003Cspan style=\"color:#85E89D\">tr\u003C/span>\u003Cspan style=\"color:#B392F0\"> key\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\">{row.id} \u003C/span>\u003Cspan style=\"color:#B392F0\">className\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\">{\u003C/span>\u003Cspan style=\"color:#9ECBFF\">`border ${\u003C/span>\u003Cspan style=\"color:#E1E4E8\">index\u003C/span>\u003Cspan style=\"color:#F97583\"> %\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 2\u003C/span>\u003Cspan style=\"color:#F97583\"> &#x26;&#x26;\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"bg-gray-200\"}`\u003C/span>\u003Cspan style=\"color:#E1E4E8\">}>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        {row.\u003C/span>\u003Cspan style=\"color:#B392F0\">getVisibleCells\u003C/span>\u003Cspan style=\"color:#E1E4E8\">().\u003C/span>\u003Cspan style=\"color:#B392F0\">map\u003C/span>\u003Cspan style=\"color:#E1E4E8\">((\u003C/span>\u003Cspan style=\"color:#FFAB70\">cell\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">          &#x3C;\u003C/span>\u003Cspan style=\"color:#85E89D\">td\u003C/span>\u003Cspan style=\"color:#B392F0\"> className\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"border border-slate-600 p-4\"\u003C/span>\u003Cspan style=\"color:#B392F0\"> key\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\">{cell.id}>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">            {\u003C/span>\u003Cspan style=\"color:#B392F0\">flexRender\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(cell.column.columnDef.cell, cell.\u003C/span>\u003Cspan style=\"color:#B392F0\">getContext\u003C/span>\u003Cspan style=\"color:#E1E4E8\">())}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">          &#x3C;/\u003C/span>\u003Cspan style=\"color:#85E89D\">td\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        ))}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      &#x3C;/\u003C/span>\u003Cspan style=\"color:#85E89D\">tr\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    ))}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  &#x3C;/\u003C/span>\u003Cspan style=\"color:#85E89D\">tbody\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">&#x3C;/\u003C/span>\u003Cspan style=\"color:#85E89D\">table\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>If you haven’t seen headless tables rendered the above might look weird. The neat thing is that you are in complete control of the tables style. This saves so many headaches that sneak up on you when you pick a table library.\u003C/p>\n\u003Cp>There’s a couple fun table things that are worth noticing here. For styling, \u003Ccode>border-collapse\u003C/code> comes in handy when styling tables. This keeps you from having to style the borders on every cell. If you’re not used to styling things, this is one you’ll want to use. The other is that when we want to do a data transformation we can do it in the column definition. This keeps logic for presentation in one place. It’s very easy to have tables that get out of hand with logic in the wrong place.\u003C/p>\n\u003Ch3 id=\"sorting\">Sorting\u003C/h3>",{"headings":223,"imagePaths":230,"frontmatter":213},[224,227],{"depth":47,"slug":225,"text":226},"simplest-example","Simplest Example",{"depth":47,"slug":228,"text":229},"sorting","Sorting",[],"simple-table.md","setup-function-patterns",{"id":232,"data":234,"body":238,"filePath":239,"digest":240,"rendered":241,"legacyId":249},{"title":235,"description":236,"date":237,"revisions":15},"Helpful setup function patterns for testing","My personal pattern for testing. I picked this up from some folks at work and use it all the time now","2020-08-01","## How a setup pattern can simplify testing components\n\nI ran into this pattern at work, and I love it. It makes tests straightforward to read. This way, each test, is only testing one prop at a time, and the setup is ultra-clear. If you're updating a single prop, the test itself declares that. Let's imagine the following component (stolen from the footer of this site but simplified).\n\nThe goal will be to have a component that renders three links, and a view more button, or more than 3 links and, a show less button.\n\n```jsx\nimport React from 'react';\n\nconst Footer = ({ links }) => {\n  // handles the number of links to show\n  const [linksLength, setlinksLength] = React.useState(2);\n  // handles the button text\n  const buttonText = linksLength === 2 ? 'View more' : 'View less';\n  // handles the links to show, if the number > 2 it\n  const socialLinks = links.filter((item, index) => index \u003C= socialLength);\n\n  const handleClick = () => {\n    setSocialLength(socialLength === links.length ? 2 : links.len)\n  }\n\n  return (\n      \u003Cdiv>\n        \u003Ch4>Site Links\u003C/h4>\n        \u003Cul>\n          {socialLinks.map(({ siteLink, siteName }) =>\n            (\n              \u003Cli key={siteLink}>\n                \u003Ca href={siteLink}>\n                  {siteName}\n                \u003C/a>\n              \u003C/li>\n            ))}\n        \u003C/ul>\n        \u003Cbutton onClick={() => handleClick()}>{buttonText}\u003C/button>\n      \u003C/div>\n    )\n```\n\nThere are a million ways to write that but suppose that's how we did it. I'd write three tests to write for this I think.\n\n- toggles button text between \"view more\" and \"view less\"\n- three links are rendered by default\n- more than three links are rendered on click\n- maybe a 4th for no button when there are fewer than 3 links\n\nWith the setup function this test looks something like this:\n\n```js\ndescribe('\u003CFooter/>', () => { // this is a style I like just preference\n    const setup = overrides => {\n      const props = {\n      links: ['link-one', 'link-two', 'link-three', 'link-four']\n      ...overrides\n      }\n\n      const R = render(\u003CFooter {...props}/>)\n\n      return {\n      ...R,\n      props\n    }\n  }\n\n  it('toggles button text between \"view more\" and \"view less\"', () => {\n    const {\n      queryByText, getByText, getByRole\n    } = setup();\n\n    expect(getByText(/View more/i)).toBeInTheDocument();\n    expect(queryByText(/View less/i)).not.toBeInTheDocument();\n    userEvent.click(getByRole('button'));\n    expect(getByText(/View less/i)).toBeInTheDocument();\n    expect(queryByText(/View more/i)).not.toBeInTheDocument();\n  })\n})\n```\n\nNext we handle showing the default.\n\n```jsx\nit(\"shows three links by default\", () => {\n  const mockLinks = [\"One\", \"Two\", \"Three\", \"Four\"];\n  const { queryByText } = setup({ links: mockLinks });\n\n  expect(queryByText(/Four/i)).not.toBeInTheDocument();\n});\n```\n\nFor me, this test is super clean. I can know everything important about this inside the \"it block\". Generally, I'm weakly opposed to multiple expects in a block but that case makes sense. I suppose some folks would dislike this next test since it's basically the same. Reasonable arguments could be made about duplication, or perhaps how you don't need to have a test that tests super similar things. I like this test duplication.\n\n```jsx\nit(\"more than three links are rendered on click\", () => {\n  const mockLinks = [\"One\", \"Two\", \"Three\", \"Four\"];\n  const { queryByText, getByText, getByRole } = setup({ links: mockLinks });\n\n  expect(queryByText(/Four/i)).not.toBeInTheDocument();\n  userEvent.click(getByRole(\"button\"));\n  expect(getByText(/Four/i)).toBeInTheDocument();\n});\n```\n\nLook how clean! One thing to note here is that I'm getting by role button. A few months ago I would have used a `getByText(/View more/i)` for that. But suppose marketing decides they want to change that to `Show more`. Your test, for how many links show, fails. It's a little thing, but I think it's nicer. Also, it forces you to make a small react component, rather than some 300 line monstrosity.\n\nIf we want, we can add that fourth test (which would fail if we don't fix the example code).\n\n```jsx\nit(\"shows no button when there are fewer than 3 links\", () => {\n  const mockLinks = [\"One\", \"Two\"];\n  const { queryByRole } = setup({ links: mockLinks });\n\n  expect(queryByRole(\"button\")).not.toBeInTheDocument();\n\n  // This is also okay I just wouldn't do it now\n  // expect(queryByText(/View more/i)).not.toBeInTheDocument();\n});\n```\n\nThis simple little pattern has been helpful for me. I typically write more testable code because of this setup function. I'm glad I learned it and it's useful for me. If it's you're kinda thing, you can use \u003Ca href=\"https://marketplace.visualstudio.com/items?itemName=fitzsimonsdevin.rtl-quick-debug\" target=\"_blank\"  rel=\"noopener noreferrer nofollow\">this extension\u003C/a>. It's not particularly fancy but I made it to make that easier for myself. Maybe it helps you. Message me if this makes sense or you have some other testing tips. I think testing is probably my favorite part of writing code these days.","src/content/blog/setup-function-patterns.md","16bb3def8c6b87ab",{"html":242,"metadata":243},"\u003Ch2 id=\"how-a-setup-pattern-can-simplify-testing-components\">How a setup pattern can simplify testing components\u003C/h2>\n\u003Cp>I ran into this pattern at work, and I love it. It makes tests straightforward to read. This way, each test, is only testing one prop at a time, and the setup is ultra-clear. If you’re updating a single prop, the test itself declares that. Let’s imagine the following component (stolen from the footer of this site but simplified).\u003C/p>\n\u003Cp>The goal will be to have a component that renders three links, and a view more button, or more than 3 links and, a show less button.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"jsx\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">import\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> React \u003C/span>\u003Cspan style=\"color:#F97583\">from\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> 'react'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#B392F0\"> Footer\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> ({ \u003C/span>\u003Cspan style=\"color:#FFAB70\">links\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> }) \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">  // handles the number of links to show\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  const\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> [\u003C/span>\u003Cspan style=\"color:#79B8FF\">linksLength\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#79B8FF\">setlinksLength\u003C/span>\u003Cspan style=\"color:#E1E4E8\">] \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> React.\u003C/span>\u003Cspan style=\"color:#B392F0\">useState\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">2\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">  // handles the button text\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> buttonText\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> linksLength \u003C/span>\u003Cspan style=\"color:#F97583\">===\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 2\u003C/span>\u003Cspan style=\"color:#F97583\"> ?\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> 'View more'\u003C/span>\u003Cspan style=\"color:#F97583\"> :\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> 'View less'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">  // handles the links to show, if the number > 2 it\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> socialLinks\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> links.\u003C/span>\u003Cspan style=\"color:#B392F0\">filter\u003C/span>\u003Cspan style=\"color:#E1E4E8\">((\u003C/span>\u003Cspan style=\"color:#FFAB70\">item\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#FFAB70\">index\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> index \u003C/span>\u003Cspan style=\"color:#F97583\">&#x3C;=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> socialLength);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  const\u003C/span>\u003Cspan style=\"color:#B392F0\"> handleClick\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> () \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">    setSocialLength\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(socialLength \u003C/span>\u003Cspan style=\"color:#F97583\">===\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> links.\u003C/span>\u003Cspan style=\"color:#79B8FF\">length\u003C/span>\u003Cspan style=\"color:#F97583\"> ?\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 2\u003C/span>\u003Cspan style=\"color:#F97583\"> :\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> links.len)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  return\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      &#x3C;\u003C/span>\u003Cspan style=\"color:#85E89D\">div\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        &#x3C;\u003C/span>\u003Cspan style=\"color:#85E89D\">h4\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>Site Links&#x3C;/\u003C/span>\u003Cspan style=\"color:#85E89D\">h4\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        &#x3C;\u003C/span>\u003Cspan style=\"color:#85E89D\">ul\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">          {socialLinks.\u003C/span>\u003Cspan style=\"color:#B392F0\">map\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(({ \u003C/span>\u003Cspan style=\"color:#FFAB70\">siteLink\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#FFAB70\">siteName\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> }) \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">            (\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">              &#x3C;\u003C/span>\u003Cspan style=\"color:#85E89D\">li\u003C/span>\u003Cspan style=\"color:#B392F0\"> key\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\">{siteLink}>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">                &#x3C;\u003C/span>\u003Cspan style=\"color:#85E89D\">a\u003C/span>\u003Cspan style=\"color:#B392F0\"> href\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\">{siteLink}>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">                  {siteName}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">                &#x3C;/\u003C/span>\u003Cspan style=\"color:#85E89D\">a\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">              &#x3C;/\u003C/span>\u003Cspan style=\"color:#85E89D\">li\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">            ))}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        &#x3C;/\u003C/span>\u003Cspan style=\"color:#85E89D\">ul\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        &#x3C;\u003C/span>\u003Cspan style=\"color:#85E89D\">button\u003C/span>\u003Cspan style=\"color:#B392F0\"> onClick\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\">{() \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#B392F0\"> handleClick\u003C/span>\u003Cspan style=\"color:#E1E4E8\">()}>{buttonText}&#x3C;/\u003C/span>\u003Cspan style=\"color:#85E89D\">button\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      &#x3C;/\u003C/span>\u003Cspan style=\"color:#85E89D\">div\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    )\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>There are a million ways to write that but suppose that’s how we did it. I’d write three tests to write for this I think.\u003C/p>\n\u003Cul>\n\u003Cli>toggles button text between “view more” and “view less”\u003C/li>\n\u003Cli>three links are rendered by default\u003C/li>\n\u003Cli>more than three links are rendered on click\u003C/li>\n\u003Cli>maybe a 4th for no button when there are fewer than 3 links\u003C/li>\n\u003C/ul>\n\u003Cp>With the setup function this test looks something like this:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">describe\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'&#x3C;Footer/>'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, () \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> { \u003C/span>\u003Cspan style=\"color:#6A737D\">// this is a style I like just preference\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    const\u003C/span>\u003Cspan style=\"color:#B392F0\"> setup\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#FFAB70\"> overrides\u003C/span>\u003Cspan style=\"color:#F97583\"> =>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">      const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> props\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      links: [\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'link-one'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'link-two'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'link-three'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'link-four'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">]\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">      ...\u003C/span>\u003Cspan style=\"color:#E1E4E8\">overrides\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">      const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> R\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#B392F0\"> render\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(&#x3C;\u003C/span>\u003Cspan style=\"color:#79B8FF\">Footer\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003Cspan style=\"color:#F97583\">...\u003C/span>\u003Cspan style=\"color:#E1E4E8\">props}/>)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">      return\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">      ...\u003C/span>\u003Cspan style=\"color:#79B8FF\">R\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      props\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">  it\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'toggles button text between \"view more\" and \"view less\"'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, () \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    const\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">      queryByText\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#79B8FF\">getByText\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#79B8FF\">getByRole\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    } \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#B392F0\"> setup\u003C/span>\u003Cspan style=\"color:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">    expect\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#B392F0\">getByText\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">/\u003C/span>\u003Cspan style=\"color:#DBEDFF\">View more\u003C/span>\u003Cspan style=\"color:#9ECBFF\">/\u003C/span>\u003Cspan style=\"color:#F97583\">i\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)).\u003C/span>\u003Cspan style=\"color:#B392F0\">toBeInTheDocument\u003C/span>\u003Cspan style=\"color:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">    expect\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#B392F0\">queryByText\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">/\u003C/span>\u003Cspan style=\"color:#DBEDFF\">View less\u003C/span>\u003Cspan style=\"color:#9ECBFF\">/\u003C/span>\u003Cspan style=\"color:#F97583\">i\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)).not.\u003C/span>\u003Cspan style=\"color:#B392F0\">toBeInTheDocument\u003C/span>\u003Cspan style=\"color:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    userEvent.\u003C/span>\u003Cspan style=\"color:#B392F0\">click\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#B392F0\">getByRole\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'button'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">));\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">    expect\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#B392F0\">getByText\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">/\u003C/span>\u003Cspan style=\"color:#DBEDFF\">View less\u003C/span>\u003Cspan style=\"color:#9ECBFF\">/\u003C/span>\u003Cspan style=\"color:#F97583\">i\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)).\u003C/span>\u003Cspan style=\"color:#B392F0\">toBeInTheDocument\u003C/span>\u003Cspan style=\"color:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">    expect\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#B392F0\">queryByText\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">/\u003C/span>\u003Cspan style=\"color:#DBEDFF\">View more\u003C/span>\u003Cspan style=\"color:#9ECBFF\">/\u003C/span>\u003Cspan style=\"color:#F97583\">i\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)).not.\u003C/span>\u003Cspan style=\"color:#B392F0\">toBeInTheDocument\u003C/span>\u003Cspan style=\"color:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  })\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">})\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Next we handle showing the default.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"jsx\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">it\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"shows three links by default\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, () \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> mockLinks\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> [\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"One\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"Two\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"Three\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"Four\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">];\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  const\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> { \u003C/span>\u003Cspan style=\"color:#79B8FF\">queryByText\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> } \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#B392F0\"> setup\u003C/span>\u003Cspan style=\"color:#E1E4E8\">({ links: mockLinks });\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">  expect\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#B392F0\">queryByText\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">/\u003C/span>\u003Cspan style=\"color:#DBEDFF\">Four\u003C/span>\u003Cspan style=\"color:#9ECBFF\">/\u003C/span>\u003Cspan style=\"color:#F97583\">i\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)).not.\u003C/span>\u003Cspan style=\"color:#B392F0\">toBeInTheDocument\u003C/span>\u003Cspan style=\"color:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">});\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>For me, this test is super clean. I can know everything important about this inside the “it block”. Generally, I’m weakly opposed to multiple expects in a block but that case makes sense. I suppose some folks would dislike this next test since it’s basically the same. Reasonable arguments could be made about duplication, or perhaps how you don’t need to have a test that tests super similar things. I like this test duplication.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"jsx\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">it\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"more than three links are rendered on click\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, () \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> mockLinks\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> [\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"One\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"Two\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"Three\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"Four\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">];\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  const\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> { \u003C/span>\u003Cspan style=\"color:#79B8FF\">queryByText\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#79B8FF\">getByText\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#79B8FF\">getByRole\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> } \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#B392F0\"> setup\u003C/span>\u003Cspan style=\"color:#E1E4E8\">({ links: mockLinks });\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">  expect\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#B392F0\">queryByText\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">/\u003C/span>\u003Cspan style=\"color:#DBEDFF\">Four\u003C/span>\u003Cspan style=\"color:#9ECBFF\">/\u003C/span>\u003Cspan style=\"color:#F97583\">i\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)).not.\u003C/span>\u003Cspan style=\"color:#B392F0\">toBeInTheDocument\u003C/span>\u003Cspan style=\"color:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  userEvent.\u003C/span>\u003Cspan style=\"color:#B392F0\">click\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#B392F0\">getByRole\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"button\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">));\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">  expect\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#B392F0\">getByText\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">/\u003C/span>\u003Cspan style=\"color:#DBEDFF\">Four\u003C/span>\u003Cspan style=\"color:#9ECBFF\">/\u003C/span>\u003Cspan style=\"color:#F97583\">i\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)).\u003C/span>\u003Cspan style=\"color:#B392F0\">toBeInTheDocument\u003C/span>\u003Cspan style=\"color:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">});\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Look how clean! One thing to note here is that I’m getting by role button. A few months ago I would have used a \u003Ccode>getByText(/View more/i)\u003C/code> for that. But suppose marketing decides they want to change that to \u003Ccode>Show more\u003C/code>. Your test, for how many links show, fails. It’s a little thing, but I think it’s nicer. Also, it forces you to make a small react component, rather than some 300 line monstrosity.\u003C/p>\n\u003Cp>If we want, we can add that fourth test (which would fail if we don’t fix the example code).\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"jsx\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">it\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"shows no button when there are fewer than 3 links\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, () \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> mockLinks\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> [\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"One\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"Two\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">];\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  const\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> { \u003C/span>\u003Cspan style=\"color:#79B8FF\">queryByRole\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> } \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#B392F0\"> setup\u003C/span>\u003Cspan style=\"color:#E1E4E8\">({ links: mockLinks });\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">  expect\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#B392F0\">queryByRole\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"button\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)).not.\u003C/span>\u003Cspan style=\"color:#B392F0\">toBeInTheDocument\u003C/span>\u003Cspan style=\"color:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">  // This is also okay I just wouldn't do it now\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">  // expect(queryByText(/View more/i)).not.toBeInTheDocument();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">});\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>This simple little pattern has been helpful for me. I typically write more testable code because of this setup function. I’m glad I learned it and it’s useful for me. If it’s you’re kinda thing, you can use \u003Ca href=\"https://marketplace.visualstudio.com/items?itemName=fitzsimonsdevin.rtl-quick-debug\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">this extension\u003C/a>. It’s not particularly fancy but I made it to make that easier for myself. Maybe it helps you. Message me if this makes sense or you have some other testing tips. I think testing is probably my favorite part of writing code these days.\u003C/p>",{"headings":244,"imagePaths":248,"frontmatter":234},[245],{"depth":24,"slug":246,"text":247},"how-a-setup-pattern-can-simplify-testing-components","How a setup pattern can simplify testing components",[],"setup-function-patterns.md"]